// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a = instruction, b = aluOut, sel = instruction[15], out = aRegIn);
    
    Not(in = instruction[15], out = notInst);
    Or(a = notInst, b = instruction[5], out = aRegLoad);
    
    ARegister(in = aRegIn, load = aRegLoad, out = aRegOut, out[0..14] = addressM);

    Mux16(a = aRegOut, b = inM, sel = instruction[12], out = aluY);

    And(a = instruction[4], b = instruction[15], out = dRegLoad);
    DRegister(in = aluOut, load = dRegLoad, out = aluX);

    ALU(x = aluX, y = aluY, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = aluOut, out = outM, zr = zr, ng = ng);

    And(a = instruction[3], b = instruction[15], out = writeM);
    
    And(a = instruction[1], b = zr, out = jmp1);
    And(a = instruction[2], b = ng, out = jmp2);

    Or(a = zr, b = ng, out = temp1);
    Not(in = temp1, out = temp2);
    And(a = temp2, b = instruction[0], out = jmp3);
    
    Or(a = jmp1, b = jmp2, out = jmp4);
    Or(a = jmp4, b = jmp3, out = jmp5);
    And(a = jmp5, b = instruction[15], out = pcLoad);

    Not(in = pcLoad, out = pcInc);
    
    PC(in = aRegOut, load = pcLoad, inc = pcInc, reset = reset, out[0..14] = pc);

}